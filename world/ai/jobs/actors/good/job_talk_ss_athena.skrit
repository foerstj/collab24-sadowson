/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_ss_athena.skrit

	Author(s)	: 	Sadowson

	Purpose		: 	Generic script that checks the completion of a quest.

	(C)opyright 2024 Sadowson.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Face$;
}

////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{

		string		conversation_block$;
		string 		quest_name$ = "quest_warding_crystal";
		bool		secret_reward$ = false;
		SiegePos	SpawnPos$;
		string 		Quest_Reward_Item$ = "collab_ss_athena_reward";
		int			Quest_Reward_Cash$ = 1000;
		int			Quest_Reward_Cash_Secret$ = 1000;
		
		//conversation_athena_hello								- When you first meet her, activate athena_bridge
		//conversation_athena_bridge							- Activated by HELLO, activate athena_undead
		//conversation_athena_undead							- Activated by BRIDGE, activate athena_short OR athena_long
		
		//conversation_athena_long								- Activated by UNDEAD, activate quests.
		//conversation_athena_short								- Activated by UNDEAD, activate quests.
		
		//conversation_athena_idle								- Activated by quests, idle status.
		
		//conversation_athena_complete							- Activated by end of quest, activates athena_reward
		//conversation_athena_reward							- Activated by athena_reward. Moves to idle_complete.
		
		//conversation_athena_idle_complete						- Activated after quest is complete and reward is given, idle status.
		//conversation_athena_idle_complete_secret-option		- Activated after quest is complete and reward is given, idle status. Activates athena_know
		//conversation_athena_know								- Activated by athena_know, self-idles
		
		//The secret quest is stored as an INT, not as a quest script.
		//Players need to go through each segment sequentially in order for the final dialogue to unlock. Considering there's no backpedalling for this, that should be easy enough.
		//Each step is also sequentially locked from the previous, meaning that you can't progress unless absolutely doing it in the correct order.
		//1: Quest active.
		//2: Find Arkantos Dialogue Book.
		//3: Ask the Archivist about his Counterpart outside the Sleeping Catacombs
		//4: Talk to the Archivist in his tomb room inside the Sleeping Catacombs.
		//5: Look at the tomb that is empty.
		//6: Talk to the Archivist at the end of the Sleeping Catacombs and mention that the tomb is empty.
		//7: Finally, talk to Lady Athena to close it off AFTER finishing the quest.
		
		
		//Part One, say hello because nothing else is valid yet.
		conversation_block$ = "conversation_athena_hello";
		
		
		if( GameAuditor.GetDb.GetBool( "athena_bridge" ) )
		{
			conversation_block$ = "conversation_athena_bridge";
			
			if( GameAuditor.GetDb.GetBool( "athena_undead" ) )
			{
				conversation_block$ = "conversation_athena_undead";
			}
		}
		
		//Determine if we're talking about a long or short explanation for what to do...
		//This actually determines to the player if we're doing long or short dialog for the rest of the quests so set the global variable.
		//Technically we don't need to declare a false bool but it's a safety catch here.
		if( GameAuditor.GetDb.GetBool( "athena_short" ) )
		{
			conversation_block$ = "conversation_athena_short";
			GameAuditor.GetDb.SetBool( "collab_ss_dialog_short", true );
			GameAuditor.GetDb.SetBool( "collab_ss_dialog_long", false );
			
			//PostWorldMessage( WE_REQ_ACTIVATE, m_go$.goid, m_go$.goid, 126, 1.0 );
			PostWorldMessage( WE_REQ_ACTIVATE, m_go$.goid, m_go$.goid, 198, 1.0 );
			
			//Kill old variables as a safety net
			GameAuditor.GetDb.SetBool( "athena_undead", false );
			GameAuditor.GetDb.SetBool( "athena_bridge", false );
		}
		else if( GameAuditor.GetDb.GetBool( "athena_long" ) )
		{
			conversation_block$ = "conversation_athena_long";
			GameAuditor.GetDb.SetBool( "collab_ss_dialog_short", false );
			GameAuditor.GetDb.SetBool( "collab_ss_dialog_long", true );
			GameAuditor.GetDb.SetBool( "secret_quest_active", true );
			GameAuditor.GetDb.SetInt( "secret_quest_state", 1 );
			Report.Generic( "secret_quest_state: 1" );
			Report.Generic( "secret_quest_active: true" );
			
			//PostWorldMessage( WE_REQ_ACTIVATE, m_go$.goid, m_go$.goid, 126, 1.0 );
			PostWorldMessage( WE_REQ_ACTIVATE, m_go$.goid, m_go$.goid, 198, 1.0 );
			
			//Kill old variables as a safety net
			GameAuditor.GetDb.SetBool( "athena_undead", false );
			GameAuditor.GetDb.SetBool( "athena_bridge", false );
		}
		
		//The dialog is done and the quest is activated so switch to idle dialog.
		//Else show the completion dialog, returning to Lady Athena is required to complete step 4.
		if( Victory.IsQuestActive( quest_name$ ) )
		{
			conversation_block$ = "conversation_athena_idle";
			
			if( Victory.GetQuestOrder( quest_name$ ) == 4 )
			{
				conversation_block$ = "conversation_athena_complete";
				PostWorldMessage( WE_REQ_ACTIVATE, m_go$.goid, m_go$.goid, 199, 1.0 );	//Kill the Indicator.
			}
			//Kill old variables as a safety net
			GameAuditor.GetDb.SetBool( "conversation_athena_long", false );
			GameAuditor.GetDb.SetBool( "conversation_athena_short", false );
		}
		
		//Athena reverts to a completed idle conversation which can only be overwritten by the "I know" secret ending.
		//The secret ending becomes the last default if selected.
		if( Victory.IsQuestCompleted( quest_name$ ) )
		{
			if( GameAuditor.GetDb.GetBool( "Athena_secret_known" ) )
			{
				conversation_block$ = "conversation_athena_idle_complete_secret-option";
				if( GameAuditor.GetDb.GetBool( "Athena_know" ) )
				{
					conversation_block$ = "conversation_athena_know";
					secret_reward$ = true;
				}
			}
			else
			{
				//Secret ending was not unlocked, so give generic response.
				conversation_block$ = "conversation_athena_idle_complete";
			}
		}
		
		//Athena gifts reward to player.
		//This has to occur after the idle option because otherwise it'll never trigger properly.
		if( GameAuditor.GetDb.GetBool( "athena_reward" ) )
		{
			conversation_block$ = "conversation_athena_reward";
			//Kill old variables as a safety net
			GameAuditor.GetDb.SetBool( "athena_reward", false );
			
			//Give Reward
			GoCloneReq clonereq_Item$ = MakeGoCloneReq( Quest_Reward_Item$ );
			SpawnPos$ = m_Target$.go.placement.position;
			if( m_Target$.Go.Hasmind )
			{
				if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
				{
					clonereq_Item$.StartingPos = m_target$.Go.Mind.TempPos1;
				}
			}
			clonereq_Item$.SnapToTerrain = true;
			GoDb.SCloneGo( clonereq_Item$ );
			
			GoCloneReq clonereq_Gold$ = MakeGoCloneReq( "gold" );
			SpawnPos$ = m_Target$.go.placement.position;
			if( m_Target$.Go.Hasmind )
			{
				if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
				{
					clonereq_Gold$.StartingPos = m_target$.Go.Mind.TempPos1;
				}
			}
			clonereq_Gold$.SnapToTerrain = true;
			goid gold$ = GoDb.SCloneGo( clonereq_Gold$ );
			gold$.Go.Aspect.SetGoldValue( Quest_Reward_Cash$ );
		}
		if( secret_reward$ == true )
		{
			if( GameAuditor.GetDb.GetBool( "Secret_reward_Complete" ) != true )
			{
				secret_reward$ = false;
			
				GoCloneReq clonereq_secret_Gold$ = MakeGoCloneReq( "gold" );
				SpawnPos$ = m_Target$.go.placement.position;
				if( m_Target$.Go.Hasmind )
				{
					if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
					{
						clonereq_secret_Gold$.StartingPos = m_target$.Go.Mind.TempPos1;
					}
				}
				clonereq_secret_Gold$.SnapToTerrain = true;
				goid gold$ = GoDb.SCloneGo( clonereq_secret_Gold$ );
				gold$.Go.Aspect.SetGoldValue( Quest_Reward_Cash_Secret$ );
				
				GameAuditor.GetDb.SetBool( "Secret_reward_complete", true );
			}
		}
		
		//Use Conversation
		m_go$.GetConversation.RSSelectConversation( conversation_block$ );
		TryAnim$('talk');
		
		//Start talking
		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		// $$$ close up any dialogs here...

		// Send a PL_FACE reguest without a target so that they no longer
		// continue to face the character they were talking to
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}


