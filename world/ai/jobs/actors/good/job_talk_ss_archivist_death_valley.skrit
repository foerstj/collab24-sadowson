/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_ss_archivist_death_valley.skrit

	Author(s)	: 	Sadowson

	Purpose		: 	Generic script which checks the actors highest skill level and then activates the relevant conversation.

	(C)opyright 2024 Sadowson.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

int human_count$( GopColl list$ )
{
	AIQuery.TempQtColl1.Clear;
	AIQuery.TempQtColl1.Add( QT_ACTOR );
	AIQuery.TempQtColl1.Add( QT_GOOD );
	AIQuery.TempGopColl2.Clear;
	AIQuery.Get( m_go$, AIQuery.TempQtColl1, list$, AiQuery.TempGopColl2 );
	
	int i$ = 0;
	int iend$ = AIQuery.TempGopColl2.size;
	int player_count$ = 0;
	
	while( i$ < iend$ )
	{
		Go Temp$ = AIQuery.TempGopColl2.Get( i$ );
		if( Temp$ != null )
		{
			if( Temp$.IsAnyHumanPartyMember )
			{
				player_count$ += 1;
			}
		}
		i$ += 1;
	}
	return player_count$;
	Report.GenericF( "job_talk_ss_archivist_death_valley.skrit: human_count iend$: %i \n", iend$ );
}

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Face$;
}

////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		/*
		conversation_archivist_hello					-> return_warding_crystal
		conversation_archivist_return_warding_crystal	-> request_entry | dv_counterpart
		conversation_archivist_counterpart				-> request_entry
		conversation_archivist_request_entry
		conversation_archivist_gate_open				-> Activated when elevator has risen.
		conversation_archivist_on_elevator				-> Activated when all player members are on elevator node.
		*/
		
		string conversation_block$;
		bool may_talk$ = true;
		conversation_block$ = "conversation_archivist_hello";
		
		if( GameAuditor.GetDb.GetBool( "return_warding_crystal" ) )
		{
			conversation_block$ = "conversation_archivist_return_warding_crystal";
			may_talk$ = true;
		}
		
		if( GameAuditor.GetDb.GetBool( "dv_counterpart" ) )
		{
			conversation_block$ = "conversation_archivist_counterpart";
			may_talk$ = true;
			
			if( GameAuditor.GetDb.GetInt( "secret_quest_state" ) == 3 )
			{
				GameAuditor.GetDb.SetInt( "secret_quest_state", 4 );
			}
		}
		
		//This will override dv_counterpart when active - that is intentional.
		if( GameAuditor.GetDb.GetBool( "request_entry" ) )
		{
			conversation_block$ = "conversation_archivist_request_entry";
			may_talk$ = true;
		}
		
		if( GameAuditor.GetDb.GetBool( "collab_ss_death_valley_elevator" ) )
		{
			conversation_block$ = "conversation_archivist_gate_open";
			may_talk$ = true;
		}
		
		goid collab_ss_ruins_combo_lock$ = MakeGoid( GameAuditor.GetDb.GetInt( "collab_ss_ruins_combo_lock_goid" ) );
		SiegePos Elevator_Location$ = collab_ss_ruins_combo_lock$.go.placement.position;
		///Count party members on the elevator.
		int	PartyMembersInNode$ = 0;

		AIQuery.TempGopColl1.clear;
		AIQuery.GetOccupantsInSphere( collab_ss_ruins_combo_lock$.go.placement.position, 2.0, AIQuery.TempGopColl1 );
		PartyMembersInNode$ = human_count$( AiQuery.TempGopColl1 );
		
		Report.GenericF( "job_talk_ss_archivist_death_valley.skrit: PartyMembersInNode$: %i \n", PartyMembersInNode$ );

		//Count party members that exist across the game.
		
		AIQuery.TempQtColl1.Clear;
		AIQuery.TempQTColl1.Add( QT_ACTOR );
		AIQuery.TempQTColl1.Add( QT_GOOD );
		
		AiQuery.TempGopColl2.Clear;
		AiQuery.Get( m_Go$, AIQuery.TempQTColl1, AIQuery.TempGopColl1, AIQuery.TempGopColl2 );
		int i$ = 0;
		int iend$ = AIQuery.TempGopColl2.size;
		int PartyMembersInParty$ = 0;
		
		while( i$ < iend$ )
		{
			Go Temp$ = AIQuery.TempGopColl2.Get( i$ );
			if( Temp$ != null )
			{
				if( Temp$.IsAnyHumanPartyMember )
				{
					PartyMembersInParty$ += 1;
				}
			}
			i$ += 1;
		}
		Report.GenericF( "job_talk_ss_archivist_death_valley.skrit: PartyMembersInParty$: %i \n", PartyMembersInParty$ );
		
		if( PartyMembersInParty$ == PartyMembersInNode$ )//This will technically always override conversation requests.
		{
			if( PartymembersInParty$ != 0 )
			{
				conversation_block$ = "conversation_archivist_on_elevator";
				may_talk$ = true;
			}
		}
		
		//Check if we should actually kick the elevator down.
		if( GameAuditor.Getdb.GetBool( "dv_player_ready" ) )
		{
			may_talk$ = false;
			//PostWorldMessage( WE_TRIGGER_DEACTIVATE, m_go$.goid, collab_ss_ruins_combo_lock$, 0.0 );
			PostWorldMessage( WE_REQ_DEACTIVATE, m_go$.goid, collab_ss_ruins_combo_lock$, 1.0 );
			Report.Generic( "job_talk_ss_archivist_death_valley.skrit: dv_player_ready acknowledged" );
		}
		
		//Use conversation - not lowering elevator.
		if( may_talk$ )
		{
			m_go$.GetConversation.RSSelectConversation( conversation_block$ );
			TryAnim$('talk');
			m_Go$.GetConversation.RSActivateDialogue();//Start talking
		}
		
		
		
		
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		// $$$ close up any dialogs here...

		// Send a PL_FACE reguest without a target so that they no longer
		// continue to face the character they were talking to
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}


